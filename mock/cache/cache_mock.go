// Code generated by MockGen. DO NOT EDIT.
// Source: cache/redis.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCacheInterface is a mock of CacheInterface interface.
type MockCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCacheInterfaceMockRecorder
}

// MockCacheInterfaceMockRecorder is the mock recorder for MockCacheInterface.
type MockCacheInterfaceMockRecorder struct {
	mock *MockCacheInterface
}

// NewMockCacheInterface creates a new mock instance.
func NewMockCacheInterface(ctrl *gomock.Controller) *MockCacheInterface {
	mock := &MockCacheInterface{ctrl: ctrl}
	mock.recorder = &MockCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheInterface) EXPECT() *MockCacheInterfaceMockRecorder {
	return m.recorder
}

// GetUrl mocks base method.
func (m *MockCacheInterface) GetUrl(hashId string, url interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrl", hashId, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUrl indicates an expected call of GetUrl.
func (mr *MockCacheInterfaceMockRecorder) GetUrl(hashId, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrl", reflect.TypeOf((*MockCacheInterface)(nil).GetUrl), hashId, url)
}

// SetUrl mocks base method.
func (m *MockCacheInterface) SetUrl(hashId string, url interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUrl", hashId, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUrl indicates an expected call of SetUrl.
func (mr *MockCacheInterfaceMockRecorder) SetUrl(hashId, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUrl", reflect.TypeOf((*MockCacheInterface)(nil).SetUrl), hashId, url)
}
