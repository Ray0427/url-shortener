// Code generated by MockGen. DO NOT EDIT.
// Source: dao/url_dao.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	reflect "reflect"
	time "time"

	model "github.com/Ray0427/url-shortener/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUrlDaoInterface is a mock of UrlDaoInterface interface.
type MockUrlDaoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUrlDaoInterfaceMockRecorder
}

// MockUrlDaoInterfaceMockRecorder is the mock recorder for MockUrlDaoInterface.
type MockUrlDaoInterfaceMockRecorder struct {
	mock *MockUrlDaoInterface
}

// NewMockUrlDaoInterface creates a new mock instance.
func NewMockUrlDaoInterface(ctrl *gomock.Controller) *MockUrlDaoInterface {
	mock := &MockUrlDaoInterface{ctrl: ctrl}
	mock.recorder = &MockUrlDaoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlDaoInterface) EXPECT() *MockUrlDaoInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUrlDaoInterface) Create(url string, expireAt time.Time) (model.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", url, expireAt)
	ret0, _ := ret[0].(model.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUrlDaoInterfaceMockRecorder) Create(url, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUrlDaoInterface)(nil).Create), url, expireAt)
}

// Get mocks base method.
func (m *MockUrlDaoInterface) Get(id uint) (model.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(model.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUrlDaoInterfaceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUrlDaoInterface)(nil).Get), id)
}
